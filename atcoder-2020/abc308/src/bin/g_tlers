use std::collections::BTreeMap;

use proconio::input;

fn main() {
    input! {
        q: usize,
    }
    let mut m_x = BTreeMap::new();
    let mut m_xor = BTreeMap::new();
    for _ in 0..q {
        input! {
            t: usize,
        }
        match t {
            1 => {
                input! {
                    x: usize,
                }
                for (&k, _) in &m_x {
                    *m_xor.entry(k ^ x).or_insert(0) += 1;
                }
                *m_x.entry(x).or_insert(0) += 1;
            }
            2 => {
                input! {
                    x: usize,
                }
                if let Some(&count) = m_x.get(&x) {
                    if count == 1 {
                        m_x.remove(&x);
                    } else {
                        m_x.insert(x, count - 1);
                    }
                }
                for (&k, _) in &m_x {
                    let x = k ^ x;
                    if let Some(&count) = m_xor.get(&x) {
                        if count == 1 {
                            m_xor.remove(&x);
                        } else {
                            m_xor.insert(x, count - 1);
                        }
                    }
                }
            }
            _ => {
                if let Some((&k, _)) = m_xor.iter().next() {
                    println!("{}", k);
                }
            }
        }
    }
}
