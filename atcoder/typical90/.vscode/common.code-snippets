{
  "bit_test": {
    "scope": "rust",
    "prefix": "ac_bit_test",
    "body": [
      "trait BitTest {",
      "    fn bit_test(&self, i: usize) -> bool;",
      "}",
      "",
      "impl BitTest for usize {",
      "    /// # Examples",
      "    ///",
      "    /// ```",
      "    /// assert_eq!(0b1010.bit_test(0), false);",
      "    /// assert_eq!(0b1010.bit_test(1), true);",
      "    /// assert_eq!(0b1010.bit_test(2), false);",
      "    /// assert_eq!(0b1010.bit_test(3), true);",
      "    /// ```",
      "    fn bit_test(&self, i: usize) -> bool {",
      "        self & (1 << i) != 0",
      "    }",
      "}",
      ""
    ]
  },
  "bit_subset": {
    "scope": "rust",
    "prefix": "ac_bit_subset",
    "body": [
      "struct BitSubset {",
      "    start: usize,",
      "    next: Option<usize>,",
      "}",
      "",
      "impl Iterator for BitSubset {",
      "    type Item = usize;",
      "",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        let cur = self.next;",
      "        if let Some(x) = self.next {",
      "            self.next = if x > 0 {",
      "                Some((x - 1) & self.start)",
      "            } else {",
      "                None",
      "            };",
      "        }",
      "        cur",
      "    }",
      "}",
      "",
      "/// # Examples",
      "///",
      "/// ```",
      "/// let mut iter = bit_subset(0b1010);",
      "/// assert_eq!(iter.next(), Some(0b1010));",
      "/// assert_eq!(iter.next(), Some(0b1000));",
      "/// assert_eq!(iter.next(), Some(0b0010));",
      "/// assert_eq!(iter.next(), Some(0b0000));",
      "/// assert_eq!(iter.next(), None);",
      "/// ```",
      "fn bit_subset(start: usize) -> BitSubset {",
      "    BitSubset {",
      "        start,",
      "        next: Some(start),",
      "    }",
      "}",
      ""
    ]
  }
}